tibble::rownames_to_column(var = "UCSC_orgID") %>%
group_by(UCSC_orgID) %>%
dplyr::mutate(
chrom_sizes_url = "error" %in% class(tryCatch(read.table(paste0("ftp://hgdownload.soe.ucsc.edu/goldenPath/",
UCSC_orgID, "/bigZips/", UCSC_orgID, ".chrom.sizes"),
stringsAsFactors = FALSE),
error = function(e) e))
)
View(available_genomes)
available_genomes <- do.call(rbind.data.frame, response) %>%
tibble::rownames_to_column(var = "UCSC_orgID") %>%
group_by(UCSC_orgID) %>%
dplyr::mutate(
chrom_sizes_url = ! "error" %in% class(tryCatch(httr::GET(paste0(
"ftp://hgdownload.soe.ucsc.edu/goldenPath/",
UCSC_orgID, "/bigZips/",
UCSC_orgID, ".chrom.sizes")),
error = function(e) e))
)
available_genomes <- do.call(rbind.data.frame, response) %>%
tibble::rownames_to_column(var = "UCSC_orgID") %>%
group_by(UCSC_orgID) %>%
dplyr::mutate(
chrom_sizes_url = class(tryCatch(httr::GET(paste0(
"ftp://hgdownload.soe.ucsc.edu/goldenPath/",
UCSC_orgID, "/bigZips/",
UCSC_orgID, ".chrom.sizes")),
error = function(e) e))
)
View(available_genomes)
response
load("available_genomes (1).rda")
View(available_genomes)
httr::url_ok("asdsad.com")
httr::status_code("asd.com")
httr::status_code(httr::build_url('asd.com'))
httr::status_code(httr::build_url('http://www.asd.com'))
httr::status_code(httr::build_url('http://www.asdasd.com'))
?httr::build_url
?httr::build_url
httr::status_code(httr::build_url('http://www.asdasd.com/'))
parse_url("http://google.com/")
httr::parse_url("http://google.com/")
httr::parse_url("http://asd.com/")
httr::status_code(httr::parse_url("http://asd.com/"))
?httr::status_code
httr::HEAD(url = "www.google.com")
httr::HEAD(url = "ftp://hgdownload.soe.ucsc.edu/goldenPath/hg38/hg38.enhLutNer1.all.chain.gz")
httr::HEAD(url = "ftp://hgdownload.soe.ucsc.edu/goldenPath/hg38/")
httr::HEAD(url = "ftp://hgdownload.soe.ucsc.edu/")
httr::HEAD(url = "http://hgdownload.soe.ucsc.edu/")
httr::HEAD(url = "ftp://hgdownload.soe.ucsc.edu/")
httr::HEAD(url = "http://hgdownload.soe.ucsc.edu/goldenPath/hg38/hg38.enhLutNer1.all.chain.gz")
httr::HEAD(url = "http://hgdownload.soe.ucsc.edu/goldenPath/hg38/hg38.enhLutNer1.all.chain.gzsad")
httr::url_ok(httr::HEAD(url = "http://hgdownload.soe.ucsc.edu/goldenPath/hg38/hg38.enhLutNer1.all.chain.gzsad"))
httr::status_code(httr::HEAD(url = "http://hgdownload.soe.ucsc.edu/goldenPath/hg38/hg38.enhLutNer1.all.chain.gzsad"))
httr::status_code(httr::HEAD(url = "http://hgdownload.soe.ucsc.edu/goldenPath/hg38/hg38.enhLutNer1.all.chain.gzsad"))
identical(httr::status_code(httr::HEAD(url = "http://hgdownload.soe.ucsc.edu/goldenPath/hg38/hg38.enhLutNer1.all.chain.gzsad")), 200)
identical(httr::status_code(httr::HEAD(url = "http://hgdownload.soe.ucsc.edu/goldenPath/hg38/hg38.enhLutNer1.all.chain.gzsad")), 404)
httr::status_code(httr::HEAD(url = "http://hgdownload.soe.ucsc.edu/goldenPath/hg38/hg38.enhLutNer1.all.chain.gzsad"))
dd <- httr::status_code(httr::HEAD(url = "http://hgdownload.soe.ucsc.edu/goldenPath/hg38/hg38.enhLutNer1.all.chain.gzsad"))
dd
identical(httr::status_code(httr::HEAD(url = "http://hgdownload.soe.ucsc.edu/goldenPath/hg38/hg38.enhLutNer1.all.chain.gzsad")), 404L)
identical(httr::status_code(httr::HEAD(url = "http://hgdownload.soe.ucsc.edu/goldenPath/hg38/hg38.enhLutNer1.all.chain.gz")), 404L)
identical(httr::status_code(httr::HEAD(url = "http://hgdownload.soe.ucsc.edu/goldenPath/hg38/hg38.enhLutNer1.all.chain.gz")), 200L)
genome
#' Check if URL exists
#' @param url URL to check
#' @return logical. TRUE if status code 200, FALSE if not
urlExists <- function(url) {
identical(
httr::status_code(
# Checks HEAD only due to size constraints
httr::HEAD(
url
)
), 200L  # Checks if response is ok
)
}
urlExists(
paste0(
"https://rmapdb-data.s3.us-east-2.amazonaws.com/rlfs-beds/",
genome, ".rlfs.bed"
)
)
urlExists(
paste0(
"https://rmapdb-data.s3.us-east-2.amazonaws.com/rlfs-beds/",
genome, ".rlfs.bsed"
)
)
available_genomes2 <- do.call(rbind.data.frame, response) %>%
tibble::rownames_to_column(var = "UCSC_orgID")
View(available_genomes2)
return(
urlExists(
paste0(
'http://hgdownload.soe.ucsc.edu/goldenPath/',
genome, '/bigZips/genes/', genome, '.ensGene.gtf.gz'
)
)
)
return(
urlExists(
paste0(
'http://hgdownload.soe.ucsc.edu/goldenPath/',
genome, '/bigZips/genes/', genome, '.ensGene.gtf.gz'
)
)
)
paste0(
'http://hgdownload.soe.ucsc.edu/goldenPath/',
genome, '/bigZips/genes/', genome, '.ensGene.gtf.gz'
)
urlExists(
paste0(
'http://hgdownload.soe.ucsc.edu/goldenPath/',
genome, '/bigZips/genes/', genome, '.ensGene.gtf.gz'
)
)
urlExists(
paste0(
'http://hgdownload.soe.ucsc.edu/goldenPath/',
genome, '/bigZips/genes/', genome, '.enssGene.gtf.gz'
)
)
available_genomes2 <- do.call(rbind.data.frame, response) %>%
tibble::rownames_to_column(var = "UCSC_orgID") %>%
mutate(year = gsub(x = description, replacement = "\\1",
pattern = ".+ ([0-9]\{4})\\(.+"))
available_genomes2 <- do.call(rbind.data.frame, response) %>%
tibble::rownames_to_column(var = "UCSC_orgID") %>%
mutate(year = gsub(x = description, replacement = "\\1",
pattern = ".+ ([0-9]\\{4})\\(.+"))
available_genomes2 <- do.call(rbind.data.frame, response) %>%
tibble::rownames_to_column(var = "UCSC_orgID") %>%
mutate(year = gsub(x = description, replacement = "\\1",
pattern = ".+ ([0-9]+)\\(.+"))
available_genomes2
available_genomes2
available_genomes2 <- do.call(rbind.data.frame, response) %>%
tibble::rownames_to_column(var = "UCSC_orgID") %>%
mutate(year = gsub(x = description,
replacement = "\\1",
pattern = ".+ ([0-9]+) \\(.+"))
available_genomes2 <- do.call(rbind.data.frame, response) %>%
tibble::rownames_to_column(var = "UCSC_orgID") %>%
dplyr::mutate(genes_available = checkGenes(UCSC_orgID),
year = as.numeric(gsub(x = description,
replacement = "\\1",
pattern = ".+ ([0-9]+) \\(.+")))
#' Check genes
#' Helper function which checks the chrom sizes info from UCSC
#' @param genome the UCSC genome for which to download chrom sizes
#' @return logical. TRUE if status code 200, FALSE if not
checkGenes <- function(genome) {
return(
urlExists(
paste0(
'http://hgdownload.soe.ucsc.edu/goldenPath/',
genome, '/bigZips/genes/', genome, '.ensGene.gtf.gz'
)
)
)
}
available_genomes2 <- do.call(rbind.data.frame, response) %>%
tibble::rownames_to_column(var = "UCSC_orgID") %>%
dplyr::mutate(genes_available = checkGenes(UCSC_orgID),
year = as.numeric(gsub(x = description,
replacement = "\\1",
pattern = ".+ ([0-9]+) \\(.+")))
available_genomes2 <- do.call(rbind.data.frame, response) %>%
tibble::rownames_to_column(var = "UCSC_orgID") %>%
dplyr::group_by(UCSC_orgID) %>%
dplyr::mutate(genes_available = checkGenes(UCSC_orgID),
year = as.numeric(gsub(x = description,
replacement = "\\1",
pattern = ".+ ([0-9]+) \\(.+")))
library(RSeqR)
res <- RSeqR:::buildAvailableGenomes()
RSeqR:::buildCondaEnv(packages = "khmer",
envName = "khmerEnv",
channel = c("bioconda", "conda-forge"))
reticulate::conda_install(packages = "khmer",
envName = "khmerEnv",                                               channel = c("bioconda", "conda-forge"))
reticulate::conda_install(packages = "khmer", envname = "khmerEnv",                                               channel = c("bioconda", "conda-forge"))
reticulate::conda_create(packages = "khmer", envname = "khmerEnv",                                               channel = c("bioconda", "conda-forge"))
# Get Env Path
envPath <- reticulate::conda_list() %>%
dplyr::filter(name == envName) %>%
dplyr::mutate(python = gsub(python, pattern = "/bin/python", replacement = "")) %>%
dplyr::pull(python)
envName
library(RSeqR)
res <- RSeqR:::buildAvailableGenomes()
usethis::use_test('utils')
testthat::expect_s4_class()
gr0 <- GRanges(Rle(c("chr2", "chr2", "chr1", "chr3"), c(1, 3, 2, 4)),
IRanges(1:10, width=10:1))
gr0
class(gr0)
class(gr0)[1]
otype(gr0)
isS4(gr0)
isS4(tibble())
isS4(tibble
)
tibble()
is.object(tibble())
install.packages("pryr")
pryr::otype(tibble())
?testthat::expect_output_file
library(RSeqR)
View(available_genomes)
library(RSeqR)
library(RSeqR)
usethis::use_coverage()
covr::codecov()
covr::package_coverage()
genome <- "hg38"
stop("No RLFS annotations available for ", genome)
ChIPpeakAnno::toGRanges(paste0(
"https://rmapdb-data.s3.us-east-2.amazonaws.com/rlfs-beds/",
genome, ".rlfs.bed"
))
ChIPpeakAnno::toGRanges(readr::read_tsv(paste0(
"https://rmapdb-data.s3.us-east-2.amazonaws.com/rlfs-beds/",
genome, ".rlfs.bed"
)))
ChIPpeakAnno::toGRanges(as.data.frame(readr::read_tsv(paste0(
"https://rmapdb-data.s3.us-east-2.amazonaws.com/rlfs-beds/",
genome, ".rlfs.bed"
), col_names = NULL)))
readr::read_tsv(paste0(
"https://rmapdb-data.s3.us-east-2.amazonaws.com/rlfs-beds/",
genome, ".rlfs.bed"
), col_names = NULL)
ChIPpeakAnno::toGRanges(as.data.frame(readr::read_tsv(paste0(
"https://rmapdb-data.s3.us-east-2.amazonaws.com/rlfs-beds/",
genome, ".rlfs.bed"
), col_names = FALSE)))
? regioneR::toGRanges
regioneR::toGRanges(as.data.frame(readr::read_tsv(paste0(
"https://rmapdb-data.s3.us-east-2.amazonaws.com/rlfs-beds/",
genome, ".rlfs.bed"
), col_names = FALSE)))
?stopifnot
chrom_sizes <- getChromSizes(genome)
chrom_sizes <- RSeqR:::getChromSizes(genome)
class(chrom_sizes)
RLFS <- regioneR::toGRanges(
as.data.frame(
readr::read_tsv(
paste0(
"https://rmapdb-data.s3.us-east-2.amazonaws.com/rlfs-beds/",
genome, ".rlfs.bed"
),
col_names = FALSE)
)
)
)
class(RLFS)
stopifnot("data.frame" %in% class(chrom_sizes) &
"GRanges" %in% class(RLFS))
stopifnot("data.frame" %in% class(chrom_sizes) &
"GRsanges" %in% class(RLFS))
stopifnot("data.frame" %in% class(chrom_sizes) &
"GRanges" %in% class(RLFS))
# Prevent stranded assignment
GenomicRanges::strand(RLFS) <- "*"
RLFS <- GenomicRanges::reduce(RLFS)
?regioneR::permTest
?regioneR::circularRandomizeRegions
hg19.mask <- getMask("hg38")
hg19.mask <- regioneR::getMask("hg38")
hg19.mask
BiocManager::install("BSgenome.Hsapiens.UCSC.hg38.masked")
hg38.mask <- getMask("hg38")
hg38.mask <- regioneR::getMask("hg38")
hg38.mask
library(regioneR)
hg38.mask <- regioneR::getMask("hg38")
emptyCacheRegioneR()
hg38.mask <- regioneR::getMask("hg38")
hg38.mask
getGenomeAndMask(genome = "hg38", mask = hg38.mask)
?regioneR::circularRandomizeRegions
stopifnot("data.frame" %in% class(chrom_sizes) &
"GRanges" %in% class(mask) &
"GRanges" %in% class(RLFS))
mask
hg38.mask
?regioneR::circularRandomizeRegions
dd <- RSeqR::SRX1025890
dd$rlfs_data
dd$rlfs_data[[1]]
dd <- dd$rlfs_data[[1]]
View(dd)
plot(dd[["regioneR::numOverlaps"]])
class(dd[["regioneR::numOverlaps"]])
pryr::is_s3_generic(dd[["regioneR::numOverlaps"]])
pryr::otype(dd[["regioneR::numOverlaps"]])
hg38.mask
object.size(hg38.mask)
object.size(hg38.mask) / 1000
mask <- regioneR::getMask(genome)
genomes <- c('hg38', 'hg19', 'hg18', "mm10", "mm9")
maskLst <- lapply(genomes, regioneR::getMask)
genomes <- c('hg38', 'hg19', 'hg18', "mm10", "mm9")
maskLst <- lapply(genomes, regioneR::getMask)
install("BSgenome.Hsapiens.UCSC.hg18")
BiocManager::install("BSgenome.Hsapiens.UCSC.hg18")
genomes <- c('hg38', 'hg19', 'hg18', "mm10", "mm9")
maskLst <- lapply(genomes, regioneR::getMask)
installed.packages()
BiocManager::install("BSgenome.Mmusculus.UCSC.mm10", "BSgenome.Mmusculus.UCSC.mm9")	annotation, BSgenome.Alyrata.JGI.v1, BSgenome.Amellifera.BeeBase.assembly4, BSgenome.Amellifera.NCBI.AmelHAv3.1, BSgenome.Amellifera.UCSC.apiMel2, BSgenome.Amellifera.UCSC.apiMel2.masked, BSgenome.Aofficinalis.NCBI.V1, BSgenome.Athaliana.TAIR.04232008, BSgenome.Athaliana.TAIR.TAIR9, BSgenome.Btaurus.UCSC.bosTau3, BSgenome.Btaurus.UCSC.bosTau3.masked, BSgenome.Btaurus.UCSC.bosTau4, BSgenome.Btaurus.UCSC.bosTau4.masked, BSgenome.Btaurus.UCSC.bosTau6, BSgenome.Btaurus.UCSC.bosTau6.masked, BSgenome.Btaurus.UCSC.bosTau8, BSgenome.Btaurus.UCSC.bosTau9, BSgenome.Carietinum.NCBI.v1, BSgenome.Celegans.UCSC.ce10, BSgenome.Celegans.UCSC.ce11, BSgenome.Celegans.UCSC.ce2, BSgenome.Celegans.UCSC.ce6, BSgenome.Cfamiliaris.UCSC.canFam2, BSgenome.Cfamiliaris.UCSC.canFam2.masked, BSgenome.Cfamiliaris.UCSC.canFam3, BSgenome.Cfamiliaris.UCSC.canFam3.masked, BSgenome.Cjacchus.UCSC.calJac3, BSgenome.Creinhardtii.JGI.v5.6, BSgenome.Dmelanogaster.UCSC.dm2, BSgenome.Dmelanogaster.UCSC.dm2.masked, BSgenome.Dmelanogaster.UCSC.dm3, BSgenome.Dmelanogaster.UCSC.dm3.masked, BSgenome.Dmelanogaster.UCSC.dm6, BSgenome.Drerio.UCSC.danRer10, BSgenome.Drerio.UCSC.danRer11, BSgenome.Drerio.UCSC.danRer5, BSgenome.Drerio.UCSC.danRer5.masked, BSgenome.Drerio.UCSC.danRer6, BSgenome.Drerio.UCSC.danRer6.masked, BSgenome.Drerio.UCSC.danRer7, BSgenome.Drerio.UCSC.danRer7.masked, BSgenome.Dvirilis.Ensembl.dvircaf1, BSgenome.Ecoli.NCBI.20080805, BSgenome.Gaculeatus.UCSC.gasAcu1, BSgenome.Gaculeatus.UCSC.gasAcu1.masked, BSgenome.Ggallus.UCSC.galGal3, BSgenome.Ggallus.UCSC.galGal3.masked, BSgenome.Ggallus.UCSC.galGal4, BSgenome.Ggallus.UCSC.galGal4.masked, BSgenome.Ggallus.UCSC.galGal5, BSgenome.Ggallus.UCSC.galGal6, BSgenome.Hsapiens.1000genomes.hs37d5, BSgenome.Hsapiens.NCBI.GRCh38, BSgenome.Hsapiens.UCSC.hg17, BSgenome.Hsapiens.UCSC.hg17.masked, BSgenome.Hsapiens.UCSC.hg18, BSgenome.Hsapiens.UCSC.hg18.masked, BSgenome.Hsapiens.UCSC.hg19, BSgenome.Hsapiens.UCSC.hg19.masked, BSgenome.Hsapiens.UCSC.hg38, BSgenome.Hsapiens.UCSC.hg38.masked, BSgenome.Mdomestica.UCSC.monDom5, BSgenome.Mfascicularis.NCBI.5.0, BSgenome.Mfuro.UCSC.musFur1, BSgenome.Mmulatta.UCSC.rheMac10, BSgenome.Mmulatta.UCSC.rheMac2, BSgenome.Mmulatta.UCSC.rheMac2.masked, BSgenome.Mmulatta.UCSC.rheMac3, BSgenome.Mmulatta.UCSC.rheMac3.masked, BSgenome.Mmulatta.UCSC.rheMac8, BSgenome.Mmusculus.UCSC.mm10, BSgenome.Mmusculus.UCSC.mm10.masked, BSgenome.Mmusculus.UCSC.mm8, BSgenome.Mmusculus.UCSC.mm8.masked, BSgenome.Mmusculus.UCSC.mm9, BSgenome.Mmusculus.UCSC.mm9.masked, BSgenome.Osativa.MSU.MSU7, BSgenome.Ppaniscus.UCSC.panPan1, BSgenome.Ppaniscus.UCSC.panPan2, BSgenome.Ptroglodytes.UCSC.panTro2, BSgenome.Ptroglodytes.UCSC.panTro2.masked, BSgenome.Ptroglodytes.UCSC.panTro3, BSgenome.Ptroglodytes.UCSC.panTro3.masked, BSgenome.Ptroglodytes.UCSC.panTro5, BSgenome.Ptroglodytes.UCSC.panTro6, BSgenome.Rnorvegicus.UCSC.rn4, BSgenome.Rnorvegicus.UCSC.rn4.masked, BSgenome.Rnorvegicus.UCSC.rn5, BSgenome.Rnorvegicus.UCSC.rn5.masked, BSgenome.Rnorvegicus.UCSC.rn6, BSgenome.Scerevisiae.UCSC.sacCer1, BSgenome.Scerevisiae.UCSC.sacCer2, BSgenome.Scerevisiae.UCSC.sacCer3, BSgenome.Sscrofa.UCSC.susScr11, BSgenome.Sscrofa.UCSC.susScr3, BSgenome.Sscrofa.UCSC.susScr3.masked, BSgenome.Tgondii.ToxoDB.7.0, BSgenome.Tguttata.UCSC.taeGut1, BSgenome.Tguttata.UCSC.taeGut1.masked, BSgenome.Tguttata.UCSC.taeGut2, BSgenome.Vvinifera.URGI.IGGP12Xv0, BSgenome.Vvinifera.URGI.IGGP12Xv2, BSgenome.Vvinifera.URGI.IGGP8X, ChIPanalyser, GOTHiC, HelloRanges, leeBamViews, MEDIPS, periodicDNA, REDseq, rGADEM, SNPlocs.Hsapiens.dbSNP.20120608, SNPlocs.Hsapiens.dbSNP141.GRCh38, SNPlocs.Hsapiens.dbSNP142.GRCh37, SNPlocs.Hsapiens.dbSNP144.GRCh37, SNPlocs.Hsapiens.dbSNP144.GRCh38, SNPlocs.Hsapiens.dbSNP149.GRCh38, SNPlocs.Hsapiens.dbSNP150.GRCh38, SNPlocs.Hsapiens.dbSNP151.GRCh38, VarCon, XtraSNPlocs.Hsapiens.dbSNP141.GRCh38, XtraSNPlocs.Hsapiens.dbSNP144.GRCh37,
dd <- "	annotation, BSgenome.Alyrata.JGI.v1, BSgenome.Amellifera.BeeBase.assembly4, BSgenome.Amellifera.NCBI.AmelHAv3.1, BSgenome.Amellifera.UCSC.apiMel2, BSgenome.Amellifera.UCSC.apiMel2.masked, BSgenome.Aofficinalis.NCBI.V1, BSgenome.Athaliana.TAIR.04232008, BSgenome.Athaliana.TAIR.TAIR9, BSgenome.Btaurus.UCSC.bosTau3, BSgenome.Btaurus.UCSC.bosTau3.masked, BSgenome.Btaurus.UCSC.bosTau4, BSgenome.Btaurus.UCSC.bosTau4.masked, BSgenome.Btaurus.UCSC.bosTau6, BSgenome.Btaurus.UCSC.bosTau6.masked, BSgenome.Btaurus.UCSC.bosTau8, BSgenome.Btaurus.UCSC.bosTau9, BSgenome.Carietinum.NCBI.v1, BSgenome.Celegans.UCSC.ce10, BSgenome.Celegans.UCSC.ce11, BSgenome.Celegans.UCSC.ce2, BSgenome.Celegans.UCSC.ce6, BSgenome.Cfamiliaris.UCSC.canFam2, BSgenome.Cfamiliaris.UCSC.canFam2.masked, BSgenome.Cfamiliaris.UCSC.canFam3, BSgenome.Cfamiliaris.UCSC.canFam3.masked, BSgenome.Cjacchus.UCSC.calJac3, BSgenome.Creinhardtii.JGI.v5.6, BSgenome.Dmelanogaster.UCSC.dm2, BSgenome.Dmelanogaster.UCSC.dm2.masked, BSgenome.Dmelanogaster.UCSC.dm3, BSgenome.Dmelanogaster.UCSC.dm3.masked, BSgenome.Dmelanogaster.UCSC.dm6, BSgenome.Drerio.UCSC.danRer10, BSgenome.Drerio.UCSC.danRer11, BSgenome.Drerio.UCSC.danRer5, BSgenome.Drerio.UCSC.danRer5.masked, BSgenome.Drerio.UCSC.danRer6, BSgenome.Drerio.UCSC.danRer6.masked, BSgenome.Drerio.UCSC.danRer7, BSgenome.Drerio.UCSC.danRer7.masked, BSgenome.Dvirilis.Ensembl.dvircaf1, BSgenome.Ecoli.NCBI.20080805, BSgenome.Gaculeatus.UCSC.gasAcu1, BSgenome.Gaculeatus.UCSC.gasAcu1.masked, BSgenome.Ggallus.UCSC.galGal3, BSgenome.Ggallus.UCSC.galGal3.masked, BSgenome.Ggallus.UCSC.galGal4, BSgenome.Ggallus.UCSC.galGal4.masked, BSgenome.Ggallus.UCSC.galGal5, BSgenome.Ggallus.UCSC.galGal6, BSgenome.Hsapiens.1000genomes.hs37d5, BSgenome.Hsapiens.NCBI.GRCh38, BSgenome.Hsapiens.UCSC.hg17, BSgenome.Hsapiens.UCSC.hg17.masked, BSgenome.Hsapiens.UCSC.hg18, BSgenome.Hsapiens.UCSC.hg18.masked, BSgenome.Hsapiens.UCSC.hg19, BSgenome.Hsapiens.UCSC.hg19.masked, BSgenome.Hsapiens.UCSC.hg38, BSgenome.Hsapiens.UCSC.hg38.masked, BSgenome.Mdomestica.UCSC.monDom5, BSgenome.Mfascicularis.NCBI.5.0, BSgenome.Mfuro.UCSC.musFur1, BSgenome.Mmulatta.UCSC.rheMac10, BSgenome.Mmulatta.UCSC.rheMac2, BSgenome.Mmulatta.UCSC.rheMac2.masked, BSgenome.Mmulatta.UCSC.rheMac3, BSgenome.Mmulatta.UCSC.rheMac3.masked, BSgenome.Mmulatta.UCSC.rheMac8, BSgenome.Mmusculus.UCSC.mm10, BSgenome.Mmusculus.UCSC.mm10.masked, BSgenome.Mmusculus.UCSC.mm8, BSgenome.Mmusculus.UCSC.mm8.masked, BSgenome.Mmusculus.UCSC.mm9, BSgenome.Mmusculus.UCSC.mm9.masked, BSgenome.Osativa.MSU.MSU7, BSgenome.Ppaniscus.UCSC.panPan1, BSgenome.Ppaniscus.UCSC.panPan2, BSgenome.Ptroglodytes.UCSC.panTro2, BSgenome.Ptroglodytes.UCSC.panTro2.masked, BSgenome.Ptroglodytes.UCSC.panTro3, BSgenome.Ptroglodytes.UCSC.panTro3.masked, BSgenome.Ptroglodytes.UCSC.panTro5, BSgenome.Ptroglodytes.UCSC.panTro6, BSgenome.Rnorvegicus.UCSC.rn4, BSgenome.Rnorvegicus.UCSC.rn4.masked, BSgenome.Rnorvegicus.UCSC.rn5, BSgenome.Rnorvegicus.UCSC.rn5.masked, BSgenome.Rnorvegicus.UCSC.rn6, BSgenome.Scerevisiae.UCSC.sacCer1, BSgenome.Scerevisiae.UCSC.sacCer2, BSgenome.Scerevisiae.UCSC.sacCer3, BSgenome.Sscrofa.UCSC.susScr11, BSgenome.Sscrofa.UCSC.susScr3, BSgenome.Sscrofa.UCSC.susScr3.masked, BSgenome.Tgondii.ToxoDB.7.0, BSgenome.Tguttata.UCSC.taeGut1, BSgenome.Tguttata.UCSC.taeGut1.masked, BSgenome.Tguttata.UCSC.taeGut2, BSgenome.Vvinifera.URGI.IGGP12Xv0, BSgenome.Vvinifera.URGI.IGGP12Xv2, BSgenome.Vvinifera.URGI.IGGP8X, ChIPanalyser, GOTHiC, HelloRanges, leeBamViews, MEDIPS, periodicDNA, REDseq, rGADEM, SNPlocs.Hsapiens.dbSNP.20120608, SNPlocs.Hsapiens.dbSNP141.GRCh38, SNPlocs.Hsapiens.dbSNP142.GRCh37, SNPlocs.Hsapiens.dbSNP144.GRCh37, SNPlocs.Hsapiens.dbSNP144.GRCh38, SNPlocs.Hsapiens.dbSNP149.GRCh38, SNPlocs.Hsapiens.dbSNP150.GRCh38, SNPlocs.Hsapiens.dbSNP151.GRCh38, VarCon, XtraSNPlocs.Hsapiens.dbSNP141.GRCh38, XtraSNPlocs.Hsapiens.dbSNP144.GRCh37,"
strsplit(dd, ",")
strsplit(dd, ", ")
grep(ddd, pattern = "masked")
ddd <- strsplit(dd, ", ")
grep(ddd, pattern = "masked")
ddd
grep(ddd, pattern = "\\.masked")
grep(ddd, pattern = ".+\\.masked")
ddd
ddd <- strsplit(dd, ", ")[[1]]
grep(ddd, pattern = ".+\\.masked")
ddd[grep(ddd, pattern = ".+\\.masked")]
BSGenome
BSgenome::available.genomes()
available_genomes <- BSgenome::available.genomes()
masked_genomes <- available_genomes[grep(available_genomes,
pattern = ".+\\.masked")]
masked_genomes
masked_genomes %in% installed.packages()
masked_genomes[! masked_genomes %in% installed.packages()}
maskLst <- lapply(genomes, regioneR::getMask)
}
dd <- "	annotation, BSgenome.Alyrata.JGI.v1, BSgenome.Amellifera.BeeBase.assembly4, BSgenome.Amellifera.NCBI.AmelHAv3.1, BSgenome.Amellifera.UCSC.apiMel2, BSgenome.Amellifera.UCSC.apiMel2.masked, BSgenome.Aofficinalis.NCBI.V1, BSgenome.Athaliana.TAIR.04232008, BSgenome.Athaliana.TAIR.TAIR9, BSgenome.Btaurus.UCSC.bosTau3, BSgenome.Btaurus.UCSC.bosTau3.masked, BSgenome.Btaurus.UCSC.bosTau4, BSgenome.Btaurus.UCSC.bosTau4.masked, BSgenome.Btaurus.UCSC.bosTau6, BSgenome.Btaurus.UCSC.bosTau6.masked, BSgenome.Btaurus.UCSC.bosTau8, BSgenome.Btaurus.UCSC.bosTau9, BSgenome.Carietinum.NCBI.v1, BSgenome.Celegans.UCSC.ce10, BSgenome.Celegans.UCSC.ce11, BSgenome.Celegans.UCSC.ce2, BSgenome.Celegans.UCSC.ce6, BSgenome.Cfamiliaris.UCSC.canFam2, BSgenome.Cfamiliaris.UCSC.canFam2.masked, BSgenome.Cfamiliaris.UCSC.canFam3, BSgenome.Cfamiliaris.UCSC.canFam3.masked, BSgenome.Cjacchus.UCSC.calJac3, BSgenome.Creinhardtii.JGI.v5.6, BSgenome.Dmelanogaster.UCSC.dm2, BSgenome.Dmelanogaster.UCSC.dm2.masked, BSgenome.Dmelanogaster.UCSC.dm3, BSgenome.Dmelanogaster.UCSC.dm3.masked, BSgenome.Dmelanogaster.UCSC.dm6, BSgenome.Drerio.UCSC.danRer10, BSgenome.Drerio.UCSC.danRer11, BSgenome.Drerio.UCSC.danRer5, BSgenome.Drerio.UCSC.danRer5.masked, BSgenome.Drerio.UCSC.danRer6, BSgenome.Drerio.UCSC.danRer6.masked, BSgenome.Drerio.UCSC.danRer7, BSgenome.Drerio.UCSC.danRer7.masked, BSgenome.Dvirilis.Ensembl.dvircaf1, BSgenome.Ecoli.NCBI.20080805, BSgenome.Gaculeatus.UCSC.gasAcu1, BSgenome.Gaculeatus.UCSC.gasAcu1.masked, BSgenome.Ggallus.UCSC.galGal3, BSgenome.Ggallus.UCSC.galGal3.masked, BSgenome.Ggallus.UCSC.galGal4, BSgenome.Ggallus.UCSC.galGal4.masked, BSgenome.Ggallus.UCSC.galGal5, BSgenome.Ggallus.UCSC.galGal6, BSgenome.Hsapiens.1000genomes.hs37d5, BSgenome.Hsapiens.NCBI.GRCh38, BSgenome.Hsapiens.UCSC.hg17, BSgenome.Hsapiens.UCSC.hg17.masked, BSgenome.Hsapiens.UCSC.hg18, BSgenome.Hsapiens.UCSC.hg18.masked, BSgenome.Hsapiens.UCSC.hg19, BSgenome.Hsapiens.UCSC.hg19.masked, BSgenome.Hsapiens.UCSC.hg38, BSgenome.Hsapiens.UCSC.hg38.masked, BSgenome.Mdomestica.UCSC.monDom5, BSgenome.Mfascicularis.NCBI.5.0, BSgenome.Mfuro.UCSC.musFur1, BSgenome.Mmulatta.UCSC.rheMac10, BSgenome.Mmulatta.UCSC.rheMac2, BSgenome.Mmulatta.UCSC.rheMac2.masked, BSgenome.Mmulatta.UCSC.rheMac3, BSgenome.Mmulatta.UCSC.rheMac3.masked, BSgenome.Mmulatta.UCSC.rheMac8, BSgenome.Mmusculus.UCSC.mm10, BSgenome.Mmusculus.UCSC.mm10.masked, BSgenome.Mmusculus.UCSC.mm8, BSgenome.Mmusculus.UCSC.mm8.masked, BSgenome.Mmusculus.UCSC.mm9, BSgenome.Mmusculus.UCSC.mm9.masked, BSgenome.Osativa.MSU.MSU7, BSgenome.Ppaniscus.UCSC.panPan1, BSgenome.Ppaniscus.UCSC.panPan2, BSgenome.Ptroglodytes.UCSC.panTro2, BSgenome.Ptroglodytes.UCSC.panTro2.masked, BSgenome.Ptroglodytes.UCSC.panTro3, BSgenome.Ptroglodytes.UCSC.panTro3.masked, BSgenome.Ptroglodytes.UCSC.panTro5, BSgenome.Ptroglodytes.UCSC.panTro6, BSgenome.Rnorvegicus.UCSC.rn4, BSgenome.Rnorvegicus.UCSC.rn4.masked, BSgenome.Rnorvegicus.UCSC.rn5, BSgenome.Rnorvegicus.UCSC.rn5.masked, BSgenome.Rnorvegicus.UCSC.rn6, BSgenome.Scerevisiae.UCSC.sacCer1, BSgenome.Scerevisiae.UCSC.sacCer2, BSgenome.Scerevisiae.UCSC.sacCer3, BSgenome.Sscrofa.UCSC.susScr11, BSgenome.Sscrofa.UCSC.susScr3, BSgenome.Sscrofa.UCSC.susScr3.masked, BSgenome.Tgondii.ToxoDB.7.0, BSgenome.Tguttata.UCSC.taeGut1, BSgenome.Tguttata.UCSC.taeGut1.masked, BSgenome.Tguttata.UCSC.taeGut2, BSgenome.Vvinifera.URGI.IGGP12Xv0, BSgenome.Vvinifera.URGI.IGGP12Xv2, BSgenome.Vvinifera.URGI.IGGP8X, ChIPanalyser, GOTHiC, HelloRanges, leeBamViews, MEDIPS, periodicDNA, REDseq, rGADEM, SNPlocs.Hsapiens.dbSNP.20120608, SNPlocs.Hsapiens.dbSNP141.GRCh38, SNPlocs.Hsapiens.dbSNP142.GRCh37, SNPlocs.Hsapiens.dbSNP144.GRCh37, SNPlocs.Hsapiens.dbSNP144.GRCh38, SNPlocs.Hsapiens.dbSNP149.GRCh38, SNPlocs.Hsapiens.dbSNP150.GRCh38, SNPlocs.Hsapiens.dbSNP151.GRCh38, VarCon, XtraSNPlocs.Hsapiens.dbSNP141.GRCh38, XtraSNPlocs.Hsapiens.dbSNP144.GRCh37,"
httr::GET()
ddd <- strsplit(dd, ", ")[[1]]
ddd[grep(ddd, pattern = ".+\\.masked")]
masked_genomes[! masked_genomes %in% installed.packages()]
to_install <- masked_genomes[! masked_genomes %in% installed.packages()]
BiocManager::install(to_install)
genomes <- gsub(masked_genomes, pattern = "^BSgenome\\.[a-zA-Z]+\\.UCSC\\.([a-zA-Z0-9]+)\\.masked$")
genomes <- gsub(masked_genomes, replacement = "\\1",
pattern = "^BSgenome\\.[a-zA-Z]+\\.UCSC\\.([a-zA-Z0-9]+)\\.masked$")
genomes
library(RSeqR)
maskLst <- RSeqR:::buildGenomeMasks()
masked_genomes
genomes <- gsub(masked_genomes, replacement = "\\1",
pattern = "^BSgenome\\.[a-zA-Z]+\\.UCSC\\.([a-zA-Z0-9]+)\\.masked$")
genomes
maskLst <- lapply(genomes, regioneR::getMask)
regioneR::getMask(genomes[1])
regioneR::getMask(genome = genomes[1])
?regioneR::getMask
regioneR::getMask(genome = masked_genomes[1])
getBSgenome(masked_genomes[1], masked = T)
getBSgenome(genome = genomes[1], masked = T)
hm = getBSgenome(genome = genomes[1], masked = T)
regioneR::getMask(genome = hm)
gn <- characterToBSGenome(genomes[1])
genomes
gn
chrs <- as.character(GenomicRanges::seqnames(getGenome(gn)))
getGenome(gn)
gn
ss <- GenomeInfoDb::seqinfo(gn)
ss
toGRanges(as.character(ss@seqnames), 1, as.numeric(ss@seqlengths), genome = gn)
as.character(ss@seqnames)
as.numeric(ss@seqlengths)
regioneR::toGRanges(as.character(ss@seqnames), 1, as.numeric(ss@seqlengths), genome = gn)
ChIPpeakAnno::toGRanges(as.character(ss@seqnames), 1, as.numeric(ss@seqlengths), genome = gn)
GRanges(as.character(ss@seqnames), 1, as.numeric(ss@seqlengths), genome = gn)
ss
?GRanges
IRanges(start = 1, end = ss@seqlengths)
GRanges(seqnames = as.character(ss@seqnames), ranges = IRanges(start = 1, end = ss@seqlengths),
seqlengths = as.numeric(ss@seqlengths), seqinfo = ss)
GRanges(seqnames = as.character(ss@seqnames), ranges = IRanges(start = 1, end = ss@seqlengths),
seqlengths =ss@seqlengths, seqinfo = ss)
ss@seqlengths
GRanges(seqnames = as.character(ss@seqnames), ranges = IRanges(start = 1, end = ss@seqlengths),
seqinfo = ss)
GRanges(GenomeInfoDb::seqinfo(gn))
chrs <- as.character(GenomicRanges::seqnames(GRanges(GenomeInfoDb::seqinfo(gn))))
chrs
chr.masks <- sapply(chrs, function(chr) {
mm <- Biostrings::masks(bsgenome[[chr]])
if(is.null(mm)) {
return(NULL)
} else {
mm <- Biostrings::collapse(mm)[[1]]
return(mm)
}})
bsgenome <- gn
chr.masks <- sapply(chrs, function(chr) {
mm <- Biostrings::masks(bsgenome[[chr]])
if(is.null(mm)) {
return(NULL)
} else {
mm <- Biostrings::collapse(mm)[[1]]
return(mm)
}})
chr.masks
do.call(all, lapply(chr.masks, is.null))
chr.masks <- sapply(chrs, function(chr) {
if(is.null(chr.masks[[chr]])) {
return(NULL)
} else {
return(GenomicRanges::GRanges(seqnames=S4Vectors::Rle(rep(chr, length(chr.masks[[chr]]))), ranges=chr.masks[[chr]]))
}
})
chr.masks
#Combine the mask for each chromosome into a single mask
mask <- GenomicRanges::GRanges(seqinfo = seqinfo(bsgenome))
mask
for(chr in chrs) {
if(!is.null(chr.masks[[chr]])) {
suppressWarnings(mask <- c(mask, chr.masks[[chr]]))
}
}
mask
gn
GRanges(gn)
getMask2 <- function(genome) {
gn <- characterToBSGenome(genome)
chrs <- as.character(GenomicRanges::seqnames(GRanges(GenomeInfoDb::seqinfo(gn))))
bsgenome <- gn
chr.masks <- sapply(chrs, function(chr) {
mm <- Biostrings::masks(bsgenome[[chr]])
if(is.null(mm)) {
return(NULL)
} else {
mm <- Biostrings::collapse(mm)[[1]]
return(mm)
}})
chr.masks <- sapply(chrs, function(chr) {
if(is.null(chr.masks[[chr]])) {
return(NULL)
} else {
return(GenomicRanges::GRanges(seqnames=S4Vectors::Rle(rep(chr, length(chr.masks[[chr]]))), ranges=chr.masks[[chr]]))
}
})
#Combine the mask for each chromosome into a single mask
mask <- GenomicRanges::GRanges(seqinfo = seqinfo(bsgenome))
for(chr in chrs) {
if(!is.null(chr.masks[[chr]])) {
suppressWarnings(mask <- c(mask, chr.masks[[chr]]))
}
}
}
maskLst <- lapply(genomes, getMask2)
maskLst
#' Build Mask for Genome as GRanges
#' @return A GRanges object with the masked chrom sizes.
getMask2 <- function(genome) {
gn <- characterToBSGenome(genome)
chrs <- as.character(GenomicRanges::seqnames(GRanges(GenomeInfoDb::seqinfo(gn))))
bsgenome <- gn
chr.masks <- sapply(chrs, function(chr) {
mm <- Biostrings::masks(bsgenome[[chr]])
if(is.null(mm)) {
return(NULL)
} else {
mm <- Biostrings::collapse(mm)[[1]]
return(mm)
}})
chr.masks <- sapply(chrs, function(chr) {
if(is.null(chr.masks[[chr]])) {
return(NULL)
} else {
return(GenomicRanges::GRanges(seqnames=S4Vectors::Rle(rep(chr, length(chr.masks[[chr]]))), ranges=chr.masks[[chr]]))
}
})
#Combine the mask for each chromosome into a single mask
mask <- GenomicRanges::GRanges(seqinfo = seqinfo(bsgenome))
for(chr in chrs) {
if(!is.null(chr.masks[[chr]])) {
suppressWarnings(mask <- c(mask, chr.masks[[chr]]))
}
}
return(mask)
}
maskLst <- lapply(genomes, getMask2)
maskLst
names(maskLst) <- genomes
maskLst
object.size(maskLst)
object.size(maskLst) / 1000000
library(RSeqR)
library(RSeqR)
load("misc/maskLst.rda")
install.packages("aws.s3")
Sys.setenv("AWS_ACCESS_KEY_ID" = "AKIAXWBQDYF54SLNGEHO",
"AWS_SECRET_ACCESS_KEY" = "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",
"AWS_DEFAULT_REGION" = "us-west-2",
"AWS_SESSION_TOKEN" = "IQoJb3JpZ2luX2VjEOb//////////wEaCXVzLXdlc3QtMiJIMEYCIQDhadtArPu8ErW0BybREvHTnA+Ry3/KEoZkRcpGWU+2vgIhAJ1bb4dffVsyf2IszjRDDDjO+gbFuLyOLCFCzazrygYmKvQBCL///////////wEQAhoMNTI4MzgxODg2ODQzIgzUtnlR5DmvEN8xk7wqyAEawcNsazrzeLuJHe4A4bckov2nHKY4rPX/2CDoTC18GqXljjS3E4emcvVC9/uSg6uvKwDadtkEvkSFr4CWooVuGmeK866th6o5U2qhaqjq1DRgJmoknJYwbvpxJCfYEP2bwhgywuYvhApkfeGEGcnnX8bxAoplPIcJrp6N2GiqSRcr34LooWG/oVll5hYklzvYwRsry8Y3+DNd49WqdzksJ/eIE3cmp175DNcXXJN2C0jKmLUfneCisHKVXTDTvHA0p9tafeBN1TDZg/eGBjqXAWO8qE50ZjVJbQni1e8ZLQuLPxQf1tAQaSdzLGefHPAYCm459DxvD4C23RFnD4WAT7h5H/GsY1MzR5M9B2+5zf3NPK7pH5ScJpNU/DXvJ32BcFOo8KSfDhHErglJT+uN3aNDcgiRpGqqsizjAzZTnqvBVupMMwxj7+Y6zdU4aekyuzE1osBZOmBjGXJ2o1FjAzDH2OqPVEk=")
library("aws.s3")
bucketlist()
sesstoken <- system("aws sts get-session-token", intern = TRUE)
system("which AWS")
system("which aws")
system("aws configure")
system("aws sts")
system("aws sts get-session-token")
bucketlist()
