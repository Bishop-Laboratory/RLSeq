roxygen2::roxygenise()
roxygen2::roxygenise()
library(RSeqR)
RSeqR::printHello()
RSeqR::printHello(name = "HEnry")
library(RSeqR)
remove.packages("RSeqR")
library(RSeqR)
RSeqR::available_genomes
readr::read_csv("../RSeq-supplemental-analysis/analyses/Prepare-RMapDB-Tables/sample_quality_characteristics.csv.xz")
readr::read_csv("../RSeq-supplemental-analysis/analyses/Prepare-RMapDB-Tables/sample_quality_characteristics.csv.xz") -> d
table(d$char_type)
RSeqR::SRX1025890_peaks
testthat::test_package()
testthat::test_package(package = ".")
install.packages("valr")
library(valr)
x <- bed_random(genome, seed = 1010486)
genome <- read_genome(valr_example('hg19.chrom.sizes.gz'))
genome
x <- bed_random(genome, seed = 1010486)
y <- bed_random(genome, seed = 9203911)
x
y
bed_projection(x, y, genome)
genome
return(
urlExists(
paste0("http://homer.ucsd.edu/homer/data/genomes/",
genome, ".v6.4.zip")
)
)
#' Check if URL exists
#' @param url URL to check
#' @return logical. TRUE if status code 200, FALSE if not
#' @export
urlExists <- function(url) {
identical(
httr::status_code(
# Checks HEAD only due to size constraints
httr::HEAD(
url
)
), 200L  # Checks if response is ok
)
}
#' Get Chrom Sizes
#' Helper function which downloads chrom sizes from UCSC for a genome.
#' @param genome the UCSC genome for which to download chrom sizes
#' @return A tibble containing chrom sizes
#' @export
getChromSizes <- function(genome) {
chrom_sizes <- suppressMessages(readr::read_tsv(paste0(
'http://hgdownload.soe.ucsc.edu/goldenPath/',
genome, '/bigZips/', genome, '.chrom.sizes'
), col_names = FALSE))
return(chrom_sizes)
}
#' Check RLFS Anno
#' Helper function that checks whether a genome has RLFS available
#' @param genome the UCSC genome name to check
#' @return A logical, TRUE if available, FALSE if not
#' @export
checkRLFSAnno <- function(genome) {
return(
urlExists(
paste0(
"https://rmapdb-data.s3.us-east-2.amazonaws.com/rlfs-beds/",
genome, ".rlfs.bed"
)
)
)
}
#' Get RLFS Anno
#' Helper function that retrieves RLFS
#' @param genome the UCSC genome name to retrieve RLFS for
#' @return A GRanges object with RLFS for that species.
#' @export
getRLFSAnno <- function(genome) {
# Check if annotations available first
if (! checkRLFSAnno(genome)) {
stop("No RLFS annotations available for ", genome)
}
# Return as a GRanges object
return(
regioneR::toGRanges(
as.data.frame(
suppressMessages(readr::read_tsv(
paste0(
"https://rmapdb-data.s3.us-east-2.amazonaws.com/rlfs-beds/",
genome, ".rlfs.bed"
),
col_names = FALSE))
)
)
)
}
#' Check Gene Annotations
#' Helper function which checks the chrom sizes info from UCSC
#' @param genome the UCSC genome for which to download chrom sizes
#' @return logical. TRUE if status code 200, FALSE if not
#' @export
checkGenes <- function(genome) {
return(
urlExists(
paste0(
'http://hgdownload.soe.ucsc.edu/goldenPath/',
genome, '/bigZips/genes/', genome, '.ensGene.gtf.gz'
)
)
)
}
#' Check Homer Annotations
#' Helper function which checks whether homer annotations are available
#' @param genome the UCSC genome for which to download chrom sizes
#' @return logical. TRUE if status code 200, FALSE if not
#' @export
checkHomer <- function(genome) {
return(
urlExists(
paste0("http://homer.ucsd.edu/homer/data/genomes/",
genome, ".v6.4.zip")
)
)
}
return(
urlExists(
paste0("http://homer.ucsd.edu/homer/data/genomes/",
genome, ".v6.4.zip")
)
)
urlExists(
paste0("http://homer.ucsd.edu/homer/data/genomes/",
genome, ".v6.4.zip")
)
paste0("http://homer.ucsd.edu/homer/data/genomes/",
genome, ".v6.4.zip")
genome <- "hg38"
urlExists(
paste0("http://homer.ucsd.edu/homer/data/genomes/",
genome, ".v6.4.zip")
)
# Get the file
download.file(paste0("http://homer.ucsd.edu/homer/data/genomes/",
genome, ".v6.4.zip"))
# Get the file
download.file(paste0("http://homer.ucsd.edu/homer/data/genomes/",
genome, ".v6.4.zip"), destfile = "homer.zip")
library(tidyverse)
# Return as a GRanges object
dd <- read_tsv("data/genomes/hg38/hg38.full.annotation")
dd
# Return as a GRanges object
dd <- read_tsv("data/genomes/hg38/hg38.full.annotation", col_names = c("name", "seqnames", "start", "end", "strand", "type", "width"))
dd
dd$width
dd$start - dd$end
# Return as a GRanges object
dd <- read_tsv("data/genomes/hg38/hg38.full.annotation", col_names = c("name", "seqnames", "start", "end", "strand", "type", "unknown"))
table(dd$type)
object.size(dd)
dd[1:100,] %>%
select(-name, -unknown)
dd[1:100,] %>%
select(-name, -unknown) %>%
group_by(type) %>%
mutate(name = paste0(type, "_", seq(type)))
dd[1:100,] %>%
select(-name, -unknown) %>%
group_by(type) %>%
mutate(name = paste0(type, "_", seq(type))) %>%
select(-Type)
dd[1:100,] %>%
select(-name, -unknown) %>%
group_by(type) %>%
mutate(name = paste0(type, "_", seq(type))) %>%
select(-type)
dd[1:100,] %>%
select(-name, -unknown) %>%
group_by(type) %>%
mutate(name = paste0(type, "_", seq(type))) %>%
ungroup() %>%
select(-type)
dd[1:1000,] %>%
select(-name, -unknown) %>%
group_by(type) %>%
mutate(name = paste0(type, "_", seq(type))) %>%
ungroup() %>%
select(-type)
dd[1:100.0,] %>%
select(-name, -unknown) %>%
group_by(type) %>%
mutate(name = paste0(type, "_", seq(type))) %>%
ungroup() %>%
select(-type)
dd[1:10000.0,] %>%
select(-name, -unknown) %>%
group_by(type) %>%
mutate(name = paste0(type, "_", seq(type))) %>%
ungroup() %>%
select(-type)
dd[1:100000.0,] %>%
select(-name, -unknown) %>%
group_by(type) %>%
mutate(name = paste0(type, "_", seq(type))) %>%
ungroup() %>%
select(-type)
dd2 <- dd %>%
select(-name, -unknown) %>%
group_by(type) %>%
mutate(name = paste0(type, "_", seq(type))) %>%
ungroup() %>%
select(-type)
object.size(dd2)
dd2 <- dd[1:1000,]
View(dd2)
codeKey <- tibble(
"type" = c("I", "N", "P", "E"),
"val" = c("Intron", "Intergenic", "Promoter", "Exon")
)
codeKey
dd[1:1000,] %>%
select(-name, -unknown) %>%
filter(! grepl(type, pattern = "\\?", perl = TRUE))
dd[1:1000,] %>%
select(-name, -unknown) %>%
filter(! grepl(type, pattern = "\\?", perl = TRUE)) %>%
group_by(type) %>%
mutate(name = paste0(type, "_", seq(type)))
dd2 <- dd %>%
select(-name, -unknown) %>%
filter(! grepl(type, pattern = "\\?", perl = TRUE)) %>%
group_by(type) %>%
{setNames(group_split(.), group_keys(.)[[1]])}
View(dd2)
names(dd2)
